// components/FileUpload.tsx
'use client';

import { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';

interface FileUploadStatus {
  id: string;
  file: File;
  progress: number;
  status: 'pending' | 'uploading' | 'success' | 'error';
  url?: string;
  error?: string;
}

export default function FileUpload() {
  const [fileUploads, setFileUploads] = useState<FileUploadStatus[]>([]);
  const [isUploading, setIsUploading] = useState(false);

  const uploadFileToS3 = async (file: File, id: string) => {
    try {
      // Update status to uploading
      setFileUploads(prev => prev.map(item => 
        item.id === id ? { ...item, status: 'uploading' as const } : item
      ));
      
      // Step 1: Get presigned URL from your API
      const urlResponse = await fetch('/api/generate-presigned-url', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          fileName: file.name,
          fileType: file.type,
        }),
      });
      
      if (!urlResponse.ok) {
        const errorData = await urlResponse.json();
        throw new Error(errorData.error || 'Failed to generate upload URL');
      }
      
      const { presignedUrl, url: fileUrl } = await urlResponse.json();
      
      // Step 2: Upload to S3 using XHR for progress tracking
      await new Promise<void>((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        
        // Set up progress monitoring
        xhr.upload.onprogress = (event) => {
          if (event.lengthComputable) {
            const percentComplete = Math.round((event.loaded / event.total) * 100);
            setFileUploads(prev => prev.map(item => 
              item.id === id ? { ...item, progress: percentComplete } : item
            ));
          }
        };
        
        xhr.onload = function() {
          if (xhr.status >= 200 && xhr.status < 300) {
            setFileUploads(prev => prev.map(item => 
              item.id === id ? { ...item, status: 'success' as const, url: fileUrl } : item
            ));
            resolve();
          } else {
            reject(new Error(`Upload failed with status ${xhr.status}`));
          }
        };
        
        xhr.onerror = function() {
          reject(new Error('Network error occurred during upload'));
        };
        
        // Open connection and send the file
        xhr.open('PUT', presignedUrl);
        xhr.setRequestHeader('Content-Type', file.type);
        xhr.send(file);
      });
      
    } catch (err: any) {
      const errorMessage = err.message || 'An error occurred during upload';
      setFileUploads(prev => prev.map(item => 
        item.id === id ? { ...item, status: 'error' as const, error: errorMessage } : item
      ));
    }
  };

  const uploadAllFiles = async (files: FileUploadStatus[]) => {
    setIsUploading(true);
    
    try {
      // Upload all files concurrently
      await Promise.all(files.map(fileUpload => 
        uploadFileToS3(fileUpload.file, fileUpload.id)
      ));
    } finally {
      setIsUploading(false);
    }
  };

  const onDrop = useCallback((acceptedFiles: File[]) => {
    if (acceptedFiles.length === 0) return;
    
    // Create file upload status objects
    const newFileUploads = acceptedFiles.map(file => ({
      id: `file-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
      file,
      progress: 0,
      status: 'pending' as const
    }));
    
    setFileUploads(prev => [...prev, ...newFileUploads]);
    
    // Start upload process for all new files
    uploadAllFiles(newFileUploads);
  }, []);

  const clearCompleted = () => {
    setFileUploads(prev => prev.filter(item => item.status !== 'success'));
  };

  const retryFailed = () => {
    const failedUploads = fileUploads.filter(item => item.status === 'error');
    uploadAllFiles(failedUploads);
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ 
    onDrop,
    disabled: isUploading,
    multiple: true
  });

  const pendingCount = fileUploads.filter(f => f.status === 'pending').length;
  const uploadingCount = fileUploads.filter(f => f.status === 'uploading').length;
  const successCount = fileUploads.filter(f => f.status === 'success').length;
  const errorCount = fileUploads.filter(f => f.status === 'error').length;

  // Helper function to get file type icon
  const getFileIcon = (fileName: string) => {
    const extension = fileName.split('.').pop()?.toLowerCase();
    
    switch(extension) {
      case 'pdf':
        return (
          <svg className="w-8 h-8 text-red-500" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule="evenodd" />
          </svg>
        );
      case 'jpg':
      case 'jpeg':
      case 'png':
      case 'gif':
      case 'svg':
        return (
          <svg className="w-8 h-8 text-green-500" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clipRule="evenodd" />
          </svg>
        );
      case 'doc':
      case 'docx':
        return (
          <svg className="w-8 h-8 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule="evenodd" />
          </svg>
        );
      default:
        return (
          <svg className="w-8 h-8 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M4 4a2 2 0 012-2h8a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clipRule="evenodd" />
          </svg>
        );
    }
  };

  // Function to render circular progress
  const CircularProgress = ({ progress }: { progress: number }) => {
    const size = 40;
    const strokeWidth = 4;
    const radius = (size - strokeWidth) / 2;
    const circumference = radius * 2 * Math.PI;
    const dash = (progress * circumference) / 100;

    return (
      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`} className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
        {/* Background circle */}
        <circle 
          className="text-gray-200" 
          strokeWidth={strokeWidth} 
          stroke="currentColor" 
          fill="transparent" 
          r={radius} 
          cx={size / 2} 
          cy={size / 2} 
        />
        {/* Progress circle */}
        <circle 
          className="text-blue-600 transition-all duration-300 ease-in-out" 
          strokeWidth={strokeWidth} 
          strokeDasharray={circumference}
          strokeDashoffset={circumference - dash}
          strokeLinecap="round"
          stroke="currentColor" 
          fill="transparent" 
          r={radius} 
          cx={size / 2} 
          cy={size / 2} 
          transform={`rotate(-90 ${size / 2} ${size / 2})`}
        />
        {/* Percentage text */}
        <text 
          x="50%" 
          y="50%" 
          dy=".3em" 
          textAnchor="middle" 
          className="font-semibold text-xs fill-current text-blue-600"
        >
          {progress}%
        </text>
      </svg>
    );
  };

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">Upload Files to S3</h2>
      
      <div 
        {...getRootProps()} 
        className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${
          isDragActive 
            ? 'border-blue-500 bg-blue-50' 
            : 'border-gray-300 hover:border-blue-500 hover:bg-gray-50'
        } ${isUploading ? 'opacity-50 cursor-not-allowed' : ''}`}
      >
        <input {...getInputProps()} />
        {isDragActive ? (
          <p>Drop the files here...</p>
        ) : (
          <div>
            <p className="mb-2">Drag and drop files here, or click to select files</p>
            <p className="text-sm text-gray-500">You can upload multiple files at once</p>
          </div>
        )}
      </div>
      
      {fileUploads.length > 0 && (
        <div className="mt-6">
          <div className="flex justify-between items-center mb-4">
            <h3 className="font-semibold">Files ({fileUploads.length})</h3>
            <div className="flex gap-3">
              {errorCount > 0 && (
                <button 
                  onClick={retryFailed}
                  className="text-sm px-3 py-1 bg-yellow-100 text-yellow-800 rounded hover:bg-yellow-200"
                  disabled={isUploading}
                >
                  Retry Failed ({errorCount})
                </button>
              )}
              {successCount > 0 && (
                <button 
                  onClick={clearCompleted}
                  className="text-sm px-3 py-1 bg-gray-100 text-gray-800 rounded hover:bg-gray-200"
                >
                  Clear Completed ({successCount})
                </button>
              )}
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {fileUploads.map((fileUpload) => (
              <div 
                key={fileUpload.id}
                className="border rounded-lg p-4 bg-white relative"
              >
                <div className="flex items-center">
                  {/* File icon with circular overlay for uploading state */}
                  <div className="mr-3 relative">
                    {getFileIcon(fileUpload.file.name)}
                    
                    {/* Circular progress indicator that appears during upload */}
                    {fileUpload.status === 'uploading' && (
                      <CircularProgress progress={fileUpload.progress} />
                    )}
                    
                    {/* Success check mark that briefly appears then fades */}
                    {fileUpload.status === 'success' && (
                      <div className="absolute top-0 right-0 h-4 w-4 bg-green-500 rounded-full flex items-center justify-center">
                        <svg className="h-3 w-3 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                      </div>
                    )}
                    
                    {/* Error indicator */}
                    {fileUpload.status === 'error' && (
                      <div className="absolute top-0 right-0 h-4 w-4 bg-red-500 rounded-full flex items-center justify-center">
                        <svg className="h-3 w-3 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </div>
                    )}
                  </div>
                  
                  <div className="flex-1 min-w-0">
                    <p className="font-medium truncate" title={fileUpload.file.name}>
                      {fileUpload.file.name}
                    </p>
                    <p className="text-sm text-gray-500">
                      {(fileUpload.file.size / 1024).toFixed(1)} KB
                    </p>
                    
                    {fileUpload.status === 'success' && fileUpload.url && (
                      <a 
                        href={fileUpload.url}
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-sm text-blue-500 hover:underline"
                      >
                        View file
                      </a>
                    )}
                    
                    {fileUpload.status === 'error' && fileUpload.error && (
                      <p className="text-sm text-red-500 truncate" title={fileUpload.error}>
                        {fileUpload.error}
                      </p>
                    )}
                  </div>